FROM {{ OS_image }}:{{ OS_image_version }}

ENV DEBIAN_FRONTEND=noninteractive

{% if volumes %}
{% for host_path, container_path in volumes.items() %}
VOLUME {{ container_path }}
{% endfor %}
{% endif %}

WORKDIR /data

{% for key, value in env_variables.items() %}
ENV {{ key }}={{ value }}
{% endfor %}
{% for host_port, container_port in ports.items() %}
EXPOSE {{ container_port }}
{% endfor %}

RUN apt update && apt install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git
RUN curl https://pyenv.run | bash
ENV PYENV_ROOT="/root/.pyenv"
ENV PATH="$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH"
RUN eval "$(pyenv init -)" && \
    pyenv install {{ python_version }} && \
    pyenv global {{ python_version }}
RUN python -m venv venv
ENV PATH="venv/bin:$PATH"
RUN pip install --upgrade pip

RUN --mount=type=cache,target=/var/cache/apt \ 
    apt-get update \
    && apt-get install -y --no-install-recommends \
{% for name, version in apt_get_packages.items() %}
{% if "latest" in version %}
        {{ name }} \
{% else %}
        {{ name }}={{ version }} \
{% endif %}
{% endfor %}
    && rm -rf /var/lib/apt/lists/*
{% for name, version in packages_to_install.items() %}
{% if "no version" in version %}
RUN --mount=type=cache,target=/root/.cache pip install {{ name }}
{% else %}
RUN --mount=type=cache,target=/root/.cache pip install {{ name }}=={{ version }}
{% endif %}
{% endfor %}

{% if commands_before_files %}
{% for command in commands_before_files %}
{{ command }}
{% endfor %}
{% endif %}

{% if use_requirements %}
{% for i in range(0, ranges) %}
COPY {{ use_requirements[i] }} {{  file_names[i] }}
{% endfor %}
{% endif%}
{% if use_requirements %}
{% for i in range(0, ranges) %}
RUN --mount=type=cache,target=/root/.cache pip install -r {{ file_names[i] }}
{% endfor %}
{% endif%}

COPY . /data/

{% if commands_after_files %}
{% for command in commands_after_files %}
{{ command }}
{% endfor %}
{% endif %}

{% if entry_point %}
ENTRYPOINT {{ entry_point }}
{% endif %}
